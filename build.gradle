buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

group 'com.obolonnyy.owl_ktor'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

jar {
    manifest {
        attributes(
                'Main-Class': 'com.obolonnyy.owl_ktor.ApplicationKt'
        )
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlinx' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-gson:$ktor_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"

    implementation "org.jetbrains.exposed:exposed-core:0.18.1"
    implementation "org.jetbrains.exposed:exposed-dao:0.18.1"
    implementation "org.jetbrains.exposed:exposed-jdbc:0.18.1"
    implementation "org.postgresql:postgresql:42.2.4.jre7"
    implementation "com.zaxxer:HikariCP:3.3.1"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
sourceCompatibility = 1.8

// This task will generate your fat JAR and put it in the ./build/libs/ directory
shadowJar {
    archiveFileName = "owl_ktor-${version}.jar"
//    archiveFileName = "owl-ktor.jar"
}

// needs for Heroku
task stage(type: Copy, dependsOn: [shadowJar]) {
    from jar.getArchiveFile()
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)